name: Type Safety and Encapsulation Refactor Pass
description: |
  Establish firm type boundaries, add Zod validation at all system boundaries,
  improve encapsulation, and maintain a clean, easy-to-extend architecture.

  Goals:
  - Comprehensive Zod schemas for all public interfaces
  - Runtime validation at all system boundaries
  - Clear type boundaries between modules
  - Single source of truth for types (Zod schemas → TypeScript types)
  - Improved developer experience with better error messages
  - Maintainable patterns that scale as the codebase grows

specification: type-safety-refactor.md
mode: plan
strategy: phased-parallel

phases:
  - id: phase-1-foundation
    name: Foundation
    strategy: sequential
    tasks: [task-1-core-schema-infrastructure]
    estimated_hours: 2.5

  - id: phase-2-infrastructure
    name: Infrastructure (Parallel)
    strategy: parallel
    tasks:
      [
        task-2-cli-schema-infrastructure,
        task-3-git-schema-infrastructure,
        task-4-expand-type-guards,
      ]
    estimated_hours: 1.5
    notes: All three tasks can run in parallel after Phase 1

  - id: phase-3-implementation-part-1
    name: Implementation Part 1 (Partial Parallel)
    strategy: parallel
    tasks: [task-5-refactor-generator-validation, task-7-enhance-provider-type-safety]
    estimated_hours: 2.5
    notes: Generator (2.5h) and Provider (1.5h) can run in parallel

  - id: phase-4-implementation-part-2
    name: Implementation Part 2
    strategy: sequential
    tasks: [task-6-refactor-cli-validation]
    estimated_hours: 2.5
    notes: CLI validation needs completed Generator validation

  - id: phase-5-validation
    name: Validation & Documentation
    strategy: sequential
    tasks: [task-8-integration-testing, task-9-documentation, task-10-code-review-polish]
    estimated_hours: 5.5

tasks:
  - id: task-1-core-schema-infrastructure
    name: Create Core Schema Infrastructure
    description: |
      Create central location for all core type schemas with comprehensive validation.

      Deliverables:
      - src/types/schemas.ts with all core schemas
      - commitTaskSchema for task validation
      - commitMessageOptionsSchema for options validation
      - commitMessageGeneratorConfigSchema for config validation
      - Validation helper functions
      - Comprehensive unit tests (20+ tests)
      - 100% test coverage for schemas

      Implementation details:
      - Define Zod schemas as single source of truth
      - Infer TypeScript types from schemas using z.infer
      - Add validation helpers (validateCommitTask, validateCommitOptions, etc.)
      - Add refinements for complex validation (e.g., mutual exclusivity)
      - Include helpful error messages in schemas
      - Add TSDoc comments with usage examples
    files:
      - src/types/schemas.ts
      - src/types/__tests__/schemas.test.ts
      - src/types/index.ts
    acceptance_criteria:
      - All core schemas implemented (task, options, config)
      - TypeScript types inferred from Zod schemas
      - Validation helpers created for each schema
      - Comprehensive unit tests (20+ tests)
      - 100% test coverage for new code
      - All tests pass
      - Strict TypeScript with no any types
      - TSDoc comments on all exports
      - Helpful validation error messages
    estimated_hours: 2.5

  - id: task-2-cli-schema-infrastructure
    name: Create CLI Schema Infrastructure
    description: |
      Create schemas for CLI option parsing and validation.

      Deliverables:
      - src/cli/schemas.ts with CLI option schemas
      - cliOptionsSchema for commander options
      - parsedProviderConfigSchema for JSON config parsing
      - Validation helpers for CLI-specific needs
      - Unit tests (12+ tests)
      - 100% test coverage

      Implementation details:
      - Schema for all CLI options from commander
      - JSON parsing with validation
      - Provider config string → validated config
      - Clear error messages for CLI validation failures
      - Handle defaults properly
    files:
      - src/cli/schemas.ts
      - src/cli/__tests__/schemas.test.ts
      - src/cli/index.ts
    dependencies:
      - task-1-core-schema-infrastructure
    acceptance_criteria:
      - CLI options schema implemented
      - Provider config parsing schema implemented
      - Validation helpers created
      - Unit tests added (12+ tests)
      - 100% test coverage
      - All tests pass
      - Clear error messages for invalid CLI input
      - Handles JSON parsing errors gracefully
    estimated_hours: 1.5

  - id: task-3-git-schema-infrastructure
    name: Create Git Schema Infrastructure
    description: |
      Create schemas for validating git command outputs.

      Deliverables:
      - src/utils/git-schemas.ts with git output schemas
      - gitStatusLineSchema for status line validation
      - gitStatusSchema for full status object
      - fileCategoriesSchema for categorized files
      - Validation helpers
      - Unit tests (10+ tests)
      - 100% test coverage

      Implementation details:
      - Validate git status line format (e.g., "M  file.ts")
      - Validate git status structure
      - Validate file categorization logic
      - Handle edge cases (empty status, malformed lines)
      - Clear error messages for invalid git output
    files:
      - src/utils/git-schemas.ts
      - src/utils/__tests__/git-schemas.test.ts
    dependencies:
      - task-1-core-schema-infrastructure
    acceptance_criteria:
      - Git status schemas implemented
      - File categorization schema implemented
      - Validation helpers created
      - Unit tests added (10+ tests)
      - 100% test coverage
      - All tests pass
      - Handles malformed git output gracefully
      - Clear error messages
    estimated_hours: 1.5

  - id: task-4-expand-type-guards
    name: Expand Type Guard Utilities
    description: |
      Expand src/utils/guards.ts with comprehensive type guard functions.

      New guards:
      - isNonEmptyArray<T>() - Check for non-empty arrays with proper typing
      - isDefined<T>() - Check for non-null/undefined
      - isObject() - Check for valid objects (not null, not array)
      - isError() - Check if error is Error instance
      - isString() - String type guard
      - isNumber() - Number type guard
      - isFilePath() - Valid file path string
      - hasProperty<K>() - Object has property with type safety
      - isArrayOf<T>() - Array of specific type validation

      All guards must include proper TypeScript type predicates.

      Implementation:
      - Add new guard functions to existing guards.ts
      - Include JSDoc comments with examples
      - Add comprehensive unit tests (15+ tests)
      - Ensure type narrowing works correctly
    files:
      - src/utils/guards.ts
      - src/utils/__tests__/guards.test.ts
    acceptance_criteria:
      - All new guards implemented
      - Each guard has proper type predicate
      - JSDoc comments with usage examples
      - Unit tests for all guards (15+ new tests)
      - Type narrowing validated in tests
      - All tests pass
      - No breaking changes to existing hasContent guard
    estimated_hours: 1.0

  - id: task-5-refactor-generator-validation
    name: Refactor Generator with Validation
    description: |
      Update CommitMessageGenerator to use runtime validation at all boundaries.

      Changes:
      1. Constructor validation:
         - Validate config parameter with validateGeneratorConfig
         - Provide clear error messages for invalid config
         - Handle deprecated fields with warnings

      2. Method parameter validation:
         - Validate task in generateCommitMessage
         - Validate options in generateCommitMessage
         - Use type guards where appropriate

      3. Internal validation:
         - Validate git command outputs
         - Validate categorized files
         - Add guards for optional values

      4. Error handling:
         - Catch ZodError and format for users
         - Provide actionable error messages
         - Include validation context in errors

      5. Maintain backward compatibility:
         - All existing functionality works identically
         - Deprecated fields still supported
         - No breaking changes to public API
    files:
      - src/generator.ts
      - src/generator.test.ts
    dependencies:
      - task-1-core-schema-infrastructure
      - task-3-git-schema-infrastructure
      - task-4-expand-type-guards
    acceptance_criteria:
      - Constructor validates config parameter
      - generateCommitMessage validates task and options
      - Git outputs validated before use
      - Clear error messages for validation failures
      - All existing tests pass (no regressions)
      - No breaking changes to public API
      - Deprecated fields still work with warnings
      - ZodError caught and formatted for users
      - Type guards used appropriately
    estimated_hours: 2.5

  - id: task-6-refactor-cli-validation
    name: Refactor CLI with Validation
    description: |
      Update CLI to use runtime validation for all user inputs.

      Changes:
      1. Validate commander options:
         - Parse options with validateCLIOptions
         - Catch and format validation errors
         - Provide helpful error messages

      2. Validate provider config JSON:
         - Use parseProviderConfigJSON helper
         - Handle JSON parse errors
         - Handle Zod validation errors
         - Guide user to fix issues

      3. Validate git status:
         - Validate git status output structure
         - Handle malformed git output
         - Provide clear error messages

      4. Improve error messages:
         - Format ZodError for CLI output
         - Use chalk for colored output
         - Include actionable guidance
         - Show specific validation failures

      5. Testing:
         - Manual testing of all CLI flows
         - Test error scenarios
         - Verify error messages are helpful
    files:
      - src/cli.ts
    dependencies:
      - task-2-cli-schema-infrastructure
      - task-5-refactor-generator-validation
    acceptance_criteria:
      - CLI options validated before use
      - Provider config JSON validated
      - Git status validated
      - ZodError caught and formatted
      - Error messages are helpful and actionable
      - All CLI flows tested manually
      - No breaking changes to CLI interface
      - Helpful error messages with chalk colors
    estimated_hours: 2.5

  - id: task-7-enhance-provider-type-safety
    name: Enhance Provider Type Safety
    description: |
      Add validation helpers and enhanced type safety to provider system.

      Changes:
      1. Add to src/providers/types.ts:
         - validateProviderConfigWithDetails() - Detailed validation results
         - createProviderConfig() - Create config with defaults
         - Additional type guards if needed

      2. Update provider factory:
         - Validate configs before creating providers
         - Use validation helpers
         - Provide clear errors for invalid configs

      3. Update base providers:
         - Add runtime checks where appropriate
         - Use type guards for optional values
         - Validate options in generateCommitMessage

      4. Update tests:
         - Test validation in factory
         - Test validation in base classes
         - Verify error messages
    files:
      - src/providers/types.ts
      - src/providers/provider-factory.ts
      - src/providers/base/base-cli-provider.ts
      - src/providers/base/base-api-provider.ts
      - src/providers/__tests__/validators.test.ts
    dependencies:
      - task-1-core-schema-infrastructure
      - task-4-expand-type-guards
    acceptance_criteria:
      - Validation helpers added to provider types
      - Factory validates configs before creation
      - Base providers validate at boundaries
      - Tests verify validation behavior
      - All existing tests pass
      - No breaking changes to provider APIs
      - Clear error messages for invalid configs
    estimated_hours: 1.5

  - id: task-8-integration-testing
    name: Integration Testing for Validation
    description: |
      Create comprehensive integration tests for validation across boundaries.

      Test scenarios:
      1. CLI → Generator boundary:
         - Invalid CLI options caught
         - Invalid provider config caught
         - Errors formatted correctly

      2. Generator → Provider boundary:
         - Invalid options caught
         - Invalid task caught
         - Errors propagated correctly

      3. External → Internal boundary:
         - Invalid git output caught
         - Invalid API responses caught (future)

      4. Error message quality:
         - Messages are actionable
         - Include relevant context
         - Guide user to fix

      5. Performance testing:
         - Validation overhead < 5ms
         - No performance regression
         - Benchmark before/after

      6. Backward compatibility:
         - All existing functionality works
         - Deprecated fields still supported
         - No breaking changes
    files:
      - src/__tests__/integration/validation.test.ts
      - src/__tests__/integration/error-messages.test.ts
    dependencies:
      - task-6-refactor-cli-validation
      - task-7-enhance-provider-type-safety
    acceptance_criteria:
      - Integration tests created (15+ tests)
      - All validation boundaries tested
      - Error message quality verified
      - Performance benchmarked (< 5ms overhead)
      - Backward compatibility verified
      - All tests pass
      - No performance regression detected
    estimated_hours: 2.0

  - id: task-9-documentation
    name: Documentation and Examples
    description: |
      Create comprehensive documentation for type safety patterns.

      Updates:
      1. CLAUDE.md:
         - Add "Type Safety Patterns" section
         - Schema-first development guide
         - Validation at boundaries guide
         - Type guard usage examples
         - Error handling patterns

      2. TSDoc comments:
         - All schemas have comprehensive docs
         - All validation helpers documented
         - Usage examples in comments
         - Document error cases

      3. Examples:
         - Create example of custom schema
         - Show validation in action
         - Demonstrate error handling

      4. Migration guide:
         - Document changes from pure TypeScript to Zod
         - Show before/after patterns
         - Explain benefits
    files:
      - CLAUDE.md
      - src/types/schemas.ts
      - src/cli/schemas.ts
      - src/utils/git-schemas.ts
      - src/utils/guards.ts
    dependencies:
      - task-8-integration-testing
    acceptance_criteria:
      - Type safety patterns added to CLAUDE.md
      - All schemas have TSDoc with examples
      - All validation helpers documented
      - Usage examples provided
      - Migration guide created
      - Documentation is clear and comprehensive
    estimated_hours: 2.5

  - id: task-10-code-review-polish
    name: Code Review and Polish
    description: |
      Final code review, polish, and validation before marking complete.

      Review checklist:
      1. Code Quality:
         - All strict TypeScript checks pass
         - No any types in production code
         - No type assertions except where documented
         - Consistent naming and style
         - No code duplication

      2. Testing:
         - 100% coverage for schema modules
         - All tests pass (180+ tests expected)
         - Test names are descriptive
         - No flaky tests

      3. Documentation:
         - All schemas documented
         - All helpers documented
         - Examples are correct
         - CLAUDE.md is updated

      4. Performance:
         - Validation overhead < 5ms
         - No build time increase
         - No test execution increase

      5. Validation:
         - All boundaries validated
         - Error messages are helpful
         - Type guards work correctly
         - Single source of truth maintained

      Final validation:
      - Run full test suite multiple times
      - Test on clean checkout
      - Manual testing of all flows
      - Verify all acceptance criteria met
    dependencies:
      - task-9-documentation
    acceptance_criteria:
      - All strict linting passes (0 errors, 0 warnings)
      - Full test suite passes consistently
      - 100% test coverage for schema modules
      - All documentation complete and accurate
      - Performance requirements met (< 5ms overhead)
      - No any types in production code
      - No type assertions except where documented
      - All acceptance criteria from previous tasks met
      - Ready for production use
    estimated_hours: 1.0

acceptance_criteria:
  # Code Quality
  - All public interfaces have Zod schemas
  - TypeScript types inferred from schemas (single source of truth)
  - No any types in production code
  - No type assertions except where documented
  - All strict linting passes (0 errors, 0 warnings)
  - No code duplication in validation logic

  # Testing
  - 100% test coverage for schema modules
  - All existing tests pass (136+ tests)
  - New tests added (70+ new tests expected)
  - Total test count 200+ tests
  - Integration tests verify validation boundaries
  - Test suite completes without performance regression

  # Functionality
  - Runtime validation at all system boundaries
  - CLI options validated before use
  - Generator config validated in constructor
  - Git outputs validated before processing
  - Provider configs validated before creation
  - Error messages are helpful and actionable

  # Architecture
  - Core schemas in src/types/schemas.ts
  - CLI schemas in src/cli/schemas.ts
  - Git schemas in src/utils/git-schemas.ts
  - Expanded type guards in src/utils/guards.ts
  - Clear type boundaries between modules
  - No breaking changes to existing APIs

  # Documentation
  - Type safety patterns guide in CLAUDE.md
  - All schemas have TSDoc with examples
  - All validation helpers documented
  - Migration guide provided
  - Usage examples clear and correct

  # Performance
  - Validation overhead < 5ms per operation
  - No build time increase
  - No test execution time increase
  - Schemas compiled once and reused

  # Maintainability
  - Single source of truth for each type
  - Type changes only require schema updates
  - Easy to add new validated types
  - Clear validation error messages
  - Validation logic not duplicated

estimated_total_hours: 14.5
actual_work_hours: 18.5
time_saved_via_parallelization: 4.0

success_metrics:
  quantitative:
    - Test coverage: 100% for schema modules
    - Type safety: 0 any types in production code
    - Performance: < 5ms validation overhead
    - Error clarity: 100% validation errors have actionable messages
    - Code quality: 0 ESLint violations, 0 TS warnings
  qualitative:
    - Developer experience: Clear error messages guide fixes
    - Maintainability: Single source of truth for types
    - Extensibility: Easy to add new validated types
    - Documentation: Patterns clear and well-documented
    - Reliability: Runtime validation catches config errors early
