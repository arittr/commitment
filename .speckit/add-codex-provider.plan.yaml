name: Add CodexProvider and Modularize Provider System
description: |
  Implement CodexProvider for Codex CLI integration and refactor the provider system
  to establish clear patterns for adding new AI providers with minimal code.

  Goals:
  - Full CodexProvider implementation with 100% test coverage
  - Reusable CLI abstractions (CLIExecutor, CLIResponseParser)
  - Refactored directory structure (base/, implementations/, utils/)
  - Complete documentation for adding new providers
  - New providers can be added in < 100 lines of code

specification: add-codex-provider.md
mode: plan
strategy: sequential

tasks:
  - id: task-1-cli-utilities
    name: Create CLI Utilities
    description: |
      Create reusable utilities for CLI command execution and response parsing.

      Deliverables:
      - src/providers/utils/cli-executor.ts with CLIExecutor class
      - src/providers/utils/cli-response-parser.ts with CLIResponseParser class
      - Comprehensive unit tests for both utilities
      - 100% test coverage for new utilities

      Implementation details:
      - CLIExecutor.execute(): Standardized command execution via execa
      - CLIExecutor.checkAvailable(): Command availability checking
      - CLIExecutor.executeRaw(): Full result object for advanced use cases
      - CLIResponseParser.parse(): Handle JSON and plain text output
      - CLIResponseParser.parseJSON(): Extract text from JSON responses
      - CLIResponseParser.parsePlainText(): Clean and validate plain text
      - CLIResponseParser.validateCommitMessage(): Validate commit message format
      - Proper error handling with ProviderError
      - Timeout handling and sanitized error messages
    files:
      - src/providers/utils/cli-executor.ts
      - src/providers/utils/cli-response-parser.ts
      - src/providers/utils/__tests__/cli-executor.test.ts
      - src/providers/utils/__tests__/cli-response-parser.test.ts
    acceptance_criteria:
      - CLIExecutor class implemented with execute, checkAvailable, executeRaw methods
      - CLIResponseParser class implemented with parse, parseJSON, parsePlainText methods
      - All utilities have comprehensive unit tests (12+ tests each)
      - 100% test coverage for new code
      - All tests pass
      - Strict TypeScript with no any types
      - TSDoc comments on all public methods
    estimated_hours: 2.5

  - id: task-2-directory-refactor
    name: Refactor Directory Structure
    description: |
      Reorganize provider files into logical directories for better organization.

      New structure:
      - src/providers/base/ - Base classes (BaseCLIProvider, BaseAPIProvider)
      - src/providers/implementations/ - Concrete providers (ClaudeProvider, CodexProvider)
      - src/providers/utils/ - Shared utilities (CLIExecutor, CLIResponseParser)
      - Top-level files remain (auto-detect.ts, provider-factory.ts, etc.)

      Migration steps:
      1. Create new directory structure
      2. Move files to appropriate locations
      3. Update all imports across codebase
      4. Update barrel exports in index.ts
      5. Ensure all existing tests pass

      This is a pure refactor with no functional changes.
    files:
      - src/providers/base/base-cli-provider.ts (moved)
      - src/providers/base/base-api-provider.ts (moved)
      - src/providers/base/__tests__/base-cli-provider.test.ts (moved)
      - src/providers/base/__tests__/base-api-provider.test.ts (moved)
      - src/providers/implementations/claude-provider.ts (moved)
      - src/providers/implementations/__tests__/claude-provider.test.ts (moved)
      - src/providers/index.ts (updated exports)
      - src/providers/provider-factory.ts (updated imports)
      - src/providers/auto-detect.ts (updated imports)
    dependencies:
      - task-1-cli-utilities
    acceptance_criteria:
      - New directory structure created (base/, implementations/, utils/)
      - All files moved to correct locations
      - All imports updated throughout codebase
      - Barrel exports updated in index.ts
      - All existing tests pass (136 tests)
      - No functional changes
      - Zero linting errors
    estimated_hours: 1.5

  - id: task-3-refactor-base-cli-provider
    name: Enhance BaseCLIProvider with Abstractions
    description: |
      Refactor BaseCLIProvider to use new CLI utilities and add abstract methods
      for common CLI operations.

      Changes:
      1. Add abstract methods:
         - getDefaultCommand(): string
         - getDefaultArgs(): string[]
         - preparePrompt(prompt: string): string

      2. Extract execution logic to use CLIExecutor:
         - Replace direct execa calls with CLIExecutor.execute()
         - Use CLIExecutor.checkAvailable() for availability checks

      3. Extract parsing logic to use CLIResponseParser:
         - Replace custom parsing with CLIResponseParser.parse()
         - Standardize response validation

      4. Update ClaudeProvider to implement new abstract methods

      5. Ensure backward compatibility - ClaudeProvider must work identically
    files:
      - src/providers/base/base-cli-provider.ts
      - src/providers/implementations/claude-provider.ts
      - src/providers/base/__tests__/base-cli-provider.test.ts
      - src/providers/implementations/__tests__/claude-provider.test.ts
    dependencies:
      - task-2-directory-refactor
    acceptance_criteria:
      - BaseCLIProvider has abstract methods for command, args, prompt preparation
      - BaseCLIProvider uses CLIExecutor for all command execution
      - BaseCLIProvider uses CLIResponseParser for output parsing
      - ClaudeProvider implements all abstract methods
      - ClaudeProvider works identically to before (no functional changes)
      - All existing tests pass
      - No breaking changes to public APIs
      - Code duplication eliminated between provider implementations
    estimated_hours: 2.5

  - id: task-4-research-codex-cli
    name: Research Codex CLI
    description: |
      Research and document Codex CLI command structure, output formats, and behavior.

      Research tasks:
      1. Check if Codex CLI is available/installable
      2. Test basic command syntax: codex --help, codex --version
      3. Test commit message generation commands
      4. Document output formats (plain text vs JSON)
      5. Test error cases (not installed, auth errors, timeout)
      6. Document authentication requirements
      7. Identify any differences from Claude CLI

      Deliverable: Documentation in spec or CLAUDE.md appendix

      Note: If Codex CLI is not available, document expected interface based on
      Claude CLI patterns and prepare for implementation using mocked tests.
    files:
      - .speckit/add-codex-provider.md (update Appendix)
    acceptance_criteria:
      - Codex CLI command syntax documented
      - Output formats documented with examples
      - Error cases identified and documented
      - Authentication requirements documented
      - Differences from Claude CLI noted
      - Expected interface defined for implementation
    estimated_hours: 1.0

  - id: task-5-implement-codex-provider
    name: Implement CodexProvider
    description: |
      Create CodexProvider class extending BaseCLIProvider with full implementation
      and comprehensive test coverage.

      Implementation:
      1. Create CodexProvider class in implementations/
      2. Implement abstract methods from BaseCLIProvider:
         - getDefaultCommand() -> 'codex'
         - getDefaultArgs() -> ['--print', '--no-pager'] (or as per research)
         - preparePrompt() -> format prompt for Codex

      3. Implement AIProvider interface methods:
         - getName() -> 'Codex CLI'
         - getProviderType() -> ProviderType.CLI
         - generateCommitMessage() -> use inherited from BaseCLIProvider
         - isAvailable() -> use inherited from BaseCLIProvider

      4. Add comprehensive tests (12+ tests):
         - Constructor tests (default command, custom config)
         - getName/getProviderType tests
         - isAvailable tests (installed/not installed/errors)
         - generateCommitMessage tests (plain text, JSON, timeout, errors)
         - Custom timeout and workdir handling

      5. Ensure < 150 lines of code
    files:
      - src/providers/implementations/codex-provider.ts
      - src/providers/implementations/__tests__/codex-provider.test.ts
    dependencies:
      - task-3-refactor-base-cli-provider
      - task-4-research-codex-cli
    acceptance_criteria:
      - CodexProvider class fully implemented
      - All required methods implemented
      - CodexProvider < 150 lines of code
      - Comprehensive test suite (12+ tests)
      - 100% test coverage for CodexProvider
      - All tests pass
      - Strict TypeScript with no any types
      - TSDoc comments on public methods
      - Handles plain text and JSON output
      - Proper error handling with ProviderError
    estimated_hours: 2.5

  - id: task-6-factory-integration
    name: Update Factory and Auto-Detection
    description: |
      Integrate CodexProvider into provider factory and auto-detection systems.

      Changes:
      1. Update provider-factory.ts:
         - Add CodexProvider import
         - Add Codex case to factory pattern match
         - Ensure pattern remains exhaustive

      2. Update auto-detect.ts:
         - Add CodexProvider to providers to check
         - Ensure priority order (Claude -> Codex -> others)

      3. Update types.ts (if needed):
         - Ensure 'codex' is in provider enum
         - Schema already supports it via existing definition

      4. Add integration tests:
         - Factory creates CodexProvider correctly
         - Auto-detection finds Codex when available
         - Provider chains work with Codex
    files:
      - src/providers/provider-factory.ts
      - src/providers/auto-detect.ts
      - src/providers/__tests__/provider-factory.test.ts
      - src/providers/__tests__/auto-detect.test.ts
    dependencies:
      - task-5-implement-codex-provider
    acceptance_criteria:
      - Factory creates CodexProvider for codex config
      - Factory passes custom config to CodexProvider
      - Auto-detection includes Codex in provider list
      - Auto-detection maintains priority order
      - Integration tests added and passing
      - Pattern matching remains exhaustive
      - All existing tests still pass
    estimated_hours: 1.0

  - id: task-7-cli-integration
    name: CLI Integration and Error Messages
    description: |
      Ensure CLI properly supports Codex provider with good error messages.

      Testing:
      1. Test --provider codex flag
      2. Test --fallback codex for provider chains
      3. Test --auto-detect with Codex available/unavailable
      4. Test error messages when Codex not installed
      5. Test full workflow: commit message generation via Codex

      Updates (if needed):
      - CLI already supports all providers via dynamic config parsing
      - Add helpful error messages if Codex-specific issues found
      - Update help text if needed

      Validation:
      - Manual testing with real CLI
      - E2E tests if Codex CLI available
    files:
      - src/cli.ts (if error messages need updates)
    dependencies:
      - task-6-factory-integration
    acceptance_criteria:
      - CLI --provider codex works correctly
      - CLI --fallback codex works in chains
      - CLI --auto-detect includes Codex
      - Error messages are helpful when Codex not installed
      - Full commit generation workflow tested
      - Manual testing completed
      - No breaking changes to CLI interface
    estimated_hours: 1.0

  - id: task-8-documentation
    name: Documentation and Examples
    description: |
      Create comprehensive documentation for CodexProvider and provider implementation.

      Updates:
      1. CLAUDE.md:
         - Add "Adding a New Provider" section
         - Include CLI provider step-by-step guide
         - Show CodexProvider as example
         - Document utilities (CLIExecutor, CLIResponseParser)

      2. README.md:
         - Add Codex to supported providers list
         - Add usage examples with Codex
         - Update auto-detection documentation

      3. TSDoc comments:
         - Ensure all new classes have comprehensive docs
         - Add examples for non-trivial usage
         - Document error cases

      4. Specification:
         - Update add-codex-provider.md with Codex CLI research results
         - Mark implementation complete
    files:
      - CLAUDE.md
      - README.md
      - .speckit/add-codex-provider.md
      - src/providers/implementations/codex-provider.ts (TSDoc)
      - src/providers/utils/cli-executor.ts (TSDoc)
      - src/providers/utils/cli-response-parser.ts (TSDoc)
    dependencies:
      - task-7-cli-integration
    acceptance_criteria:
      - Provider implementation guide added to CLAUDE.md
      - README updated with Codex support and examples
      - All new classes have TSDoc comments
      - Examples provided for key functionality
      - Specification updated with research results
      - Documentation is clear and comprehensive
    estimated_hours: 1.5

  - id: task-9-e2e-testing
    name: E2E Testing and Validation
    description: |
      Perform end-to-end testing with real Codex CLI (if available) and validate
      all functionality works correctly.

      Testing scenarios:
      1. Real Codex CLI commit message generation
      2. Error handling (timeout, invalid output, etc.)
      3. Provider chain with Codex as primary
      4. Provider chain with Codex as fallback
      5. Auto-detection with multiple providers
      6. Performance testing (availability check < 1s)

      If Codex CLI not available:
      - Validate using mocked tests only
      - Document expected behavior
      - Add skip conditions for E2E tests

      Additional validation:
      - Full test suite passes (150+ tests expected)
      - Linting passes with 0 errors
      - Build completes successfully
      - No performance regressions
    files:
      - test/e2e/codex-provider.test.ts (if Codex available)
    dependencies:
      - task-8-documentation
    acceptance_criteria:
      - E2E tests created (or documented as skipped)
      - Real Codex CLI tested if available
      - All error scenarios validated
      - Performance requirements met
      - Full test suite passes (150+ tests)
      - Zero linting errors
      - Build succeeds
      - No performance regressions
    estimated_hours: 1.0

  - id: task-10-code-review-polish
    name: Code Review and Polish
    description: |
      Final code review, polish, and validation before marking complete.

      Review checklist:
      1. Code Quality:
         - All strict TypeScript checks pass
         - No any types in production code
         - Pattern matching is exhaustive
         - No code duplication
         - Consistent naming and style

      2. Testing:
         - 100% coverage for new code
         - All tests pass (150+ tests)
         - Test names are descriptive
         - No flaky tests

      3. Documentation:
         - All public APIs documented
         - Examples are correct
         - Guide is clear and complete
         - README is updated

      4. Performance:
         - Availability check < 1s
         - No build time increase
         - Test suite < 30s

      5. Modularity:
         - Clear separation of concerns
         - Utilities are reusable
         - Adding new provider is simple

      Final validation:
      - Run full test suite multiple times
      - Test on clean checkout
      - Verify all acceptance criteria met
    dependencies:
      - task-9-e2e-testing
    acceptance_criteria:
      - All strict linting passes (0 errors)
      - Full test suite passes consistently
      - 100% test coverage for new code
      - All documentation complete and accurate
      - Performance requirements met
      - Code quality standards met
      - All acceptance criteria from previous tasks met
      - Ready for production use
    estimated_hours: 1.0

acceptance_criteria:
  # Code Quality
  - CodexProvider fully implemented with all required methods
  - CodexProvider < 150 lines of code
  - 100% test coverage for all new code
  - Strict TypeScript with no any types in production code
  - All linting passes (0 errors)
  - No code duplication between providers

  # Testing
  - All existing tests pass (136+ tests)
  - New tests added (50+ new tests expected)
  - Total test count 180+ tests
  - E2E tests created (or documented as skipped)
  - Test suite completes in < 30s

  # Functionality
  - CodexProvider generates commit messages correctly
  - CLI supports --provider codex
  - CLI supports --fallback codex
  - Auto-detection includes Codex
  - Provider chains work with Codex
  - Error messages are helpful

  # Architecture
  - CLIExecutor utility created and tested
  - CLIResponseParser utility created and tested
  - Directory structure refactored (base/, implementations/, utils/)
  - BaseCLIProvider enhanced with abstractions
  - No breaking changes to existing APIs

  # Documentation
  - Provider implementation guide in CLAUDE.md
  - README updated with Codex support
  - TSDoc comments on all new public APIs
  - Examples provided for key functionality

  # Performance
  - Codex availability check < 1s
  - No build time increase
  - No test execution time increase

  # Modularity
  - Adding new CLI provider requires < 5 file changes
  - Adding new CLI provider takes < 2 hours
  - Utilities are reusable across providers
  - Clear separation of concerns

estimated_total_hours: 15.5

success_metrics:
  quantitative:
    - Test coverage: 100% for new code
    - Code size: CodexProvider < 150 lines
    - Performance: Availability check < 1s
    - Test time: Full suite < 30s
    - Total tests: 180+ tests
  qualitative:
    - Developer experience: Adding CLI provider < 2 hours
    - Code quality: All strict linting passes
    - Documentation: Clear implementation guide
    - Modularity: Reusable utilities
    - Maintainability: Clear separation of concerns
